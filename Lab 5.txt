// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
float globalIntensity = .1;
vec4 globalColor = vec4(1.0);
const int MAX_LIGHTS = 5;

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4

float squareValue(in float x){
	return x*x;
}

float powerOfTwo (in float base, in int power){
    for(int i = power - 1; i >= 0; --i){
    	base *= base;
    }
	return base;
}

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}

struct pLight
{
	vec4 center;
    vec4 color;
    float intensity;
};

void initPointLight(out pLight light, in vec3 center, in vec4 color, in float intensity)
{
  	light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
    
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

void distort(out vec2 px){
    float modifier = 50.0;
	px = vec2(px.x, px.y + cos((px.x + iTime/(modifier/2.0)) * modifier)/modifier);
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    //texture init
    vec2 modifier = vec2(cos(iTime), sin(iTime));
    vec2 px = vp.pixelCoord;
    vec2 res = iChannelResolution[0].xy;
    sDCoord loc = px / res;
    loc *= 1.0;
    distort(loc);
    vec4 t1 = texture(iChannel0, loc);
    
    //Lights init
    pLight lights[MAX_LIGHTS];
    //initPointLight(lights[0], vec3(1.0, 1.0, 2.0), vec4(1.0), 10.0);
    initPointLight(lights[1], vec3(iMouse.x,  iMouse.y, 0.0), vec4(1.0), 10.0);
    
    //surface init
    vec3 sufacePos = vec3(px, -1.0);
    vec3 sufaceNorm = vec3(0.0, 0.0, 1.0);
    
    //light color init
    vec4 diffuseColor = vec4(sufaceNorm * 0.5 + 0.5, 1.0);
    vec4 specularColor = vec4(1.0);
    
    vec4 finalColor;
    for(int i = MAX_LIGHTS-1; i >= 0; --i)
    {
        //Diffuse Intensity
        vec3 lightVector = lights[i].center.xyz - sufacePos;
        float lightVectorLengthSq = lengthSq(lightVector); //saves a square root function
        vec3 normalizedLightVector = lightVector * inversesqrt(lightVectorLengthSq); // multiply by the inverse is more efficent

        float diffusionCoefficent = max(0.0, (dot(sufaceNorm, normalizedLightVector)));
        float attenuation = (1.0 - lightVectorLengthSq/squareValue(lights[i].intensity));
        float diffuseIntensity = diffusionCoefficent * attenuation; 

        //Blinn-Phong Reflectance
        vec3 viewVector = ray.origin.xyz - sufacePos; //Created because viewVector is used twice
        vec3 normalViewVector = viewVector * inversesqrt(lengthSq(viewVector)); //Multiplied by the inverse and uses the dquared length function
        vec3 halfWayVector = normalizedLightVector + normalViewVector; //Used twice 
        vec3 normalHalfWayVector = halfWayVector * inversesqrt(lengthSq(halfWayVector));
        float specCoefficent = max(0.0, dot(sufaceNorm, normalHalfWayVector)); //Multiplied by the inverse and uses the dquared length function
        float specularIntensity = powerOfTwo(specCoefficent, 50); //improved eff by removing pow function and adding a power of two function

        finalColor += (diffuseIntensity * diffuseColor + specularIntensity * specularColor) * lights[i].color;
    }
    //Final Color calculation
    vec4 sumOfColors = globalIntensity * globalColor + finalColor;
    
    return t1 + sumOfColors;
    
    
    //vec4 t2 = texture(iChannel1, vp.uv );
    //return vec4(mix(t1.rgb,t2.rgb, .5), 1.0);
    
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
